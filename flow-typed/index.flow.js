/**
 * Flowtype definitions for index
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.10.0
 */

declare module "@qiwi/decorator-utils/target/es5/interface" {
  /**
   * @module
   * @qiwi /decorator-utils
   */
  declare export interface IDecorator {
    (...args: Array<any>): any;
  }
  declare export type IInstance = {
    constructor: IInstance,
    prototype?: IProto,
    ...
  };
  declare export type IDecoratorArgs = any[];
  declare export type IDecoratorContext = {
    targetType: ITargetType | null,
    target: ITarget,
    proto: IProto,
    ctor: Function,
    propName?: IPropName,
    paramIndex?: IParamIndex,
    ...
  };
  declare export type IDecoratorHandlerContext = IDecoratorContext & {
    args: IDecoratorArgs,
    ...
  };
  declare export type IParamIndex = number;
  declare export type IHandler = (context: IDecoratorHandlerContext) => ITarget;
  declare export interface IProto {
    [key: string]: IAnyType;
  }
  declare export type IMapIterator = {
    (value: IAnyType, key: any, obj: IAnyType): IAnyType,
    ...
  };
  declare export type IReduceIterator = {
    (result: IAnyType, value: IAnyType, key: string, obj: IAnyType): IAnyType,
    ...
  };
  declare export type IPropName = string;
  declare export type IPropValue = any;
  declare export type ITarget = any;
  declare export type ITargetType = string | null;
  declare export type ITargetTypes = ITargetType | Array<ITargetType>;
  declare export type IAnyType = any;
  declare export interface IReducible {
    hasOwnProperty(name: string): boolean;
    [key: string]: IAnyType;
  }
  declare export type IDescriptor = PropertyDescriptor;
}

declare module "@qiwi/decorator-utils/target/es5/utils" {
  import type { IInstance } from "@qiwi/decorator-utils/target/es5/interface";

  import typeof get from "@qiwi/decorator-utils/target/es5/lodash.get";

  import typeof set from "@qiwi/decorator-utils/target/es5/lodash.set";

  import typeof mapValues from "@qiwi/decorator-utils/target/es5/lodash.mapvalues";

  import typeof isFunction from "@qiwi/decorator-utils/target/es5/lodash.isfunction";

  import typeof isUndefined from "@qiwi/decorator-utils/target/es5/lodash.isundefined";

  declare export { get, set, mapValues, isUndefined, isFunction };

  /**
   * Extracts prototype methods of instance.
   * @param {*} instance
   * @returns {Object}
   */
  declare export function getPrototypeMethods(
    instance: IInstance
  ): PropertyDescriptorMap;
}

declare module "@qiwi/decorator-utils/target/es5/resolver" {
  import type {
    IDecoratorContext,
    IDescriptor,
    IParamIndex,
    IPropName,
    ITarget,
    ITargetType
  } from "@qiwi/decorator-utils/target/es5/interface";

  declare export var METHOD: any; // "method"
  declare export var CLASS: any; // "class"
  declare export var FIELD: any; // "field"
  declare export var PARAM: any; // "param"
  declare export var TARGET_TYPES: {
    METHOD: string,
    CLASS: string,
    FIELD: string,
    PARAM: string,
    ...
  };
  declare type IResolver = {
    (
      target: ITarget,
      propName: IPropName,
      descriptor: IDescriptor | IParamIndex | void
    ): IDecoratorContext | null,
    ...
  };
  declare export var getDecoratorContext: IResolver;
  declare export var getClassDecoratorContext: IResolver;
  declare export var getMethodDecoratorContext: IResolver;
  declare export var getParamDecoratorContext: IResolver;
  declare export var getFieldDecoratorContext: IResolver;

  /**
   * Detects decorated target type.
   * @param {*} target
   * @param {string} [propName]
   * @param {Object} [descriptor]
   * @returns {*}
   */
  declare export var getTargetType: (
    target: any,
    propName: string,
    descriptor: number | void | PropertyDescriptor
  ) => ITargetType;
  declare export {};
}

declare module "@qiwi/decorator-utils/target/es5/meta" {
  import type { IMetadataProvider } from "@qiwi/decorator-utils/target/es5/@qiwi/substrate";

  declare export var injectMeta: (
    prv: IMetadataProvider,
    scope: string,
    path: string,
    value: mixed,
    target: any
  ) => void;
}

declare module "@qiwi/decorator-utils/target/es5/index" {
  import type {
    IHandler,
    IDecorator,
    ITargetType
  } from "@qiwi/decorator-utils/target/es5/interface";

  declare export { injectMeta } from "@qiwi/decorator-utils/target/es5/meta";

  declare export * from "@qiwi/decorator-utils/target/es5/resolver"

  /**
   * Constructs decorator by given function.
   * Holywar goes here: https://github.com/wycats/javascript-decorators/issues/23
   * @param {IHandler} handler
   * @param {ITargetTypes} [allowedTypes]
   * @returns {function(...[any])}
   */
  declare export var constructDecorator: (
    handler: IHandler,
    allowedTypes?: string | ITargetType[] | null | void
  ) => IDecorator;
  declare export var assertTargetType: (
    targetType: ITargetType,
    allowedTypes: string | void | ITargetType[] | null
  ) => void;
  declare export var createDecorator: (
    handler: IHandler,
    allowedTypes?: string | ITargetType[] | null | void
  ) => IDecorator;
  declare export default typeof constructDecorator;
}

declare module "@qiwi/decorator-utils" {
  declare export * from "@qiwi/decorator-utils/target/es5/index"
}
